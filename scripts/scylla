#!/usr/bin/python

import sys
import os
import json
import requests
import time

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

from bs4 import BeautifulSoup
from argparse import ArgumentParser

def load_type(t):
    '''Takes a string argument, evaluates it, and uses it to build and
       return a Lucence formatted query string'''
    if len(t.split('_')) > 2:
        print 'ERROR: incorrect type'

        return False

    if '_' in t:
        return '{}{}:'.format(t.split('_')[0], t.split('_')[1])

    else:
        return '{}: '.format(t.capitalize())

def banner():

    banner_str = '''
 _______  _______  __   __  ___      ___      _______
|       ||       ||  | |  ||   |    |   |    |   _   |
|  _____||       ||  |_|  ||   |    |   |    |  |_|  |
| |_____ |       ||       ||   |    |   |    |       |
|_____  ||      _||_     _||   |___ |   |___ |       |
 _____| ||     |_   |   |  |       ||       ||   _   |
|_______||_______|  |___|  |_______||_______||__| |__|
    '''

    print(banner_str)

def main():

    parser = ArgumentParser(description='scylla.sh CLI tool')

    parser.add_argument('-c', '--count', help='number of records to retrieve (default is 500)', default='500')
    parser.add_argument('-o', '--offset', help='record start offset value (default is 0)', default='0')
    parser.add_argument('-t', '--type', help='Type of record data to search for (email, user_id, user, name, ip, pass_hash, password, pass_salt, domain)', default='email')
    parser.add_argument('-q', '--query', help='query to search')
    parser.add_argument('-s', '--save', help='Save Scylla results to output file')

    parser.add_argument('--quiet', action='store_true',  help='quiet mode')
    parser.add_argument('--verbose', action='store_true', help='verbose mode')

    args = parser.parse_args()

    count = args.count
    offset = args.offset
    type = args.type
    query = args.query
    save_file = args.save
    quiet_mode = args.quiet
    verbose = args.verbose

    domain = 'https://scylla.sh'
    endpoint = '/search'
    params = '?q={}+{}&from={}&size={}'.format(load_type(type), query, offset, count)

    url = '{}{}{}'.format(domain, endpoint, params)

    print '[*] Querying Scylla API for {} breached "{}" records using search string: {}'.format(count, type, query)

    r = requests.get(url, headers={'Accept': 'application/json'}, verify=False)
    c = r.status_code

    # HTTP 500 usually/probably means our query isn't proper... server may still be down though
    if c == 500:
        print '[-] Got back an Internal Server Error.\n'
        print '[*] This means the Lucene syntax in the sent query is improperly formatted, or the server is potentially down.'
        print '[*] Try again momentarily, or use a browser to issue a request to the following URL if possible:\n'
        print '{}\n'.format(url)

        sys.exit()

    # We're good, let's optionally save the JSON data to a file before parsing it
    if c == 200:

        records = r.json()
        print '[+] {} records found!\n'.format(len(records))

        # Save file condition
        if save_file:
            with open(save_file, 'w') as write_json_records:
                write_json_records.write(json.dumps(records, indent=2))

            print '[+] {} records saved to {}\n'.format(len(records), save_file)

        # Save file condition done, parse records and optionally output them (if quiet mode not enabled)

        if not quiet_mode:

            for record in records:
                rkeys = record['_source'].keys()

                print '-' * 100
                for obj in sorted(list(set(rkeys))):
                    # try to Unicode the key and value
                    try:
                        print '{0:10}: {1:5}'.format(obj.encode('utf-8'), record['_source'][obj].encode('utf-8'))

                    # key/value isn't Unicode, output as is
                    except:
                        print '{0:10}: {1:5}'.format(obj, record['_source'][obj])

                print '-' * 100
                print '\n'

if __name__ == '__main__':

    banner()
    main()
